let require;const ENVIRONMENT_IS_NODE="string"==typeof globalThis.process?.versions?.node,ENVIRONMENT_IS_DENO="object"==typeof window&&"Deno"in window||"object"==typeof self&&"Deno"in self;export async function initialize(){if(null!=globalThis.process?.versions?.node){const{createRequire:e}=await import("module");require=e(import.meta.url)}}export function fetchResource(e,r){fetch(`${globalThis.gdPicture.baseUrl}/resources/${e}`,r)}export function fetch(e,r){try{if(ENVIRONMENT_IS_NODE){const o=require("node:fs"),t=require("node:path"),i=o.readFileSync(t.normalize(e));globalThis.gdPicture.module.FS.writeFile(r,new Uint8Array(i))}else if(ENVIRONMENT_IS_DENO){const o=Deno.readFileSync(e);globalThis.gdPicture.module.FS.writeFile(r,new Uint8Array(o))}else{const o=new XMLHttpRequest;o.open("GET",e,!1),o.overrideMimeType("text/plain; charset=x-user-defined"),o.send(),200===o.status?globalThis.gdPicture.module.FS.writeFile(r,stringToArrayBuffer(o.response)):console.error(`Could not retrieve resource. Status: ${o.status}`)}}catch(e){console.error(`Could not retrieve resource. Exception: ${e}`)}}function stringToArrayBuffer(e){const r=new ArrayBuffer(e.length),o=new Uint8Array(r);for(let r=0,t=e.length;r<t;r++)o[r]=e.charCodeAt(r);return o}